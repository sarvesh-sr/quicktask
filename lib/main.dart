import 'package:flutter/material.dart';
import 'package:hive_ce_flutter/hive_flutter.dart';

void main() async {
  // Initialize Hive using the path we want to store the db in
  await Hive.initFlutter('/home/sarvesh/dev/projects/quicktask/lib/dbhive/');

  // Open the box
  await Hive.openBox('myBox');

  print('Hive box path: ${Hive.box('myBox').path}');
  print('Box contains: ${Hive.box('myBox').length} keys');

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'QuickTask',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
      ),
      home: const MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Open the box
  final box = Hive.box('myBox');

  // Todo is stored in the form of key: [taskName, isCompleted]
  // where key is some random autogenerated int
  //       taskName is String
  //       isCompleted is bool

  // To get the nextNum of todo for taskName
  int _getNextNum() {
    if (box.isEmpty) return 1;

    int maxKey = 0;
    for (int key in box.keys) {
      if (key > maxKey) {
        maxKey = key;
      }
    }

    return maxKey + 1;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text('QuickTask', style: TextStyle(fontWeight: FontWeight.bold)),
        centerTitle: true,
      ),
      body: ListView.builder(
        itemCount: box.length,
        itemBuilder: (context, index) {
          final key = box.keyAt(index);
          String taskName = box.get(key)[0];
          bool isTaskCompleted = box.get(key)[1];

          return CheckboxListTile(
            controlAffinity: ListTileControlAffinity.leading,
            secondary: IconButton(
              onPressed: () {
                setState(() {
                  box.delete(key);
                });
              },
              icon: Icon(Icons.close),
            ),
            title: Text(taskName),
            value: isTaskCompleted,
            onChanged: (value) {
              setState(() {
                box.put(key, [taskName, value!]);
              });
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            int next = _getNextNum();
            box.put(next, ['todo $next', false]);
          });
        },
        tooltip: 'Add a todo',
        child: const Icon(Icons.add),
      ),
    );
  }
}
