import 'package:flutter/material.dart';
import 'package:hive_ce_flutter/hive_flutter.dart';

void main() async {
  // Initialize Hive using the path we want to store the db in
  await Hive.initFlutter('/home/sarvesh/dev/projects/quicktask/lib/dbhive/');

  // Open the box
  await Hive.openBox('myBox');

  print('Hive box path: ${Hive.box('myBox').path}');
  print('Box contains: ${Hive.box('myBox').length} keys');

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'QuickTask',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
      ),
      debugShowCheckedModeBanner: false,
      home: const MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Open the box
  final box = Hive.box('myBox');

  // Todo is stored in the form of key: [taskName, isCompleted]
  // where key is some random autogenerated int
  //       taskName is String
  //       isCompleted is bool

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text('QuickTask', style: TextStyle(fontWeight: FontWeight.bold)),
        centerTitle: true,
      ),
      body: ListView.builder(
        itemCount: box.length,
        itemBuilder: (context, index) {
          final key = box.keyAt(index);
          String taskName = box.get(key)[0];
          bool taskStatus = box.get(key)[1];

          // tapping the tile/task should lead to different screen
          // for that, onTap must be customized
          // hence ListTile is used instead of CheckboxListTile

          return ListTile(
            contentPadding: EdgeInsets.symmetric(horizontal: 9),
            title: Text(taskName),
            leading: Checkbox(
              value: taskStatus,
              onChanged: (value) {
                setState(() {
                  box.put(key, [taskName, value!]);
                });
              },
            ),
            trailing: IconButton(
              icon: Icon(Icons.close),
              onPressed: () {
                setState(() {
                  box.delete(key);
                });
              },
            ),

            onTap: () async {
              // used async/await because we need to wait for the user to return, to refresh the state/screen
              await Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (context) => EditTaskPage(taskIndex: key, box: box),
                ),
              );
              setState(() {}); // refresh screen after possible updates
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () {
          setState(() {
            box.add(['new task', false]);
          });
        },
        icon: const Icon(Icons.add),
        label: const Text(
          "New Task",
          style: TextStyle(fontWeight: FontWeight.w900),
        ),
      ),
    );
  }
}

class EditTaskPage extends StatefulWidget {
  final int taskIndex;
  final Box box;

  const EditTaskPage({super.key, required this.taskIndex, required this.box});

  @override
  State<EditTaskPage> createState() => _EditTaskPageState();
}

class _EditTaskPageState extends State<EditTaskPage> {
  final controller = TextEditingController();

  @override
  void initState() {
    super.initState();
    List taskData = widget.box.get(widget.taskIndex);
    controller.text = taskData[0];
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text("Edit Task", style: TextStyle(fontWeight: FontWeight.w500)),
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(36.0),
            child: TextField(
              controller: controller,
              decoration: InputDecoration(
                hintText: "Edit task name",
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(5),
                ),
              ),
            ),
          ),
          ElevatedButton(
            onPressed: () {
              if (controller.text.isNotEmpty) {
                List taskData = widget.box.get(widget.taskIndex);
                taskData[0] = controller.text;
                widget.box.put(widget.taskIndex, taskData);
                Navigator.pop(context);
              }
            },
            child: Text("Save"),
          ),
        ],
      ),
    );
  }
}
