import 'package:flutter/material.dart';
import 'package:hive_ce_flutter/hive_flutter.dart';
import 'editpage.dart';

class MyHomePage extends StatefulWidget {
  final Box box;
  final VoidCallback onThemeToggle;

  const MyHomePage({super.key, required this.box, required this.onThemeToggle});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Todo is stored in the form of key: [taskName, isCompleted]
  // where key is some random autogenerated int
  //       taskName is String
  //       isCompleted is bool

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text('QuickTask', style: TextStyle(fontWeight: FontWeight.bold)),
        centerTitle: true,
        actions: [
          IconButton(
            onPressed: widget.onThemeToggle,
            icon: Icon(
              Theme.brightnessOf(context) == Brightness.light
                  ? Icons.dark_mode
                  : Icons.light_mode,
            ),
          ),
          SizedBox(width: 5),
        ],
      ),
      body: ListView.separated(
        itemCount: widget.box.length,
        separatorBuilder: (context, index) =>
            Divider(height: 1, thickness: 0.5, color: Colors.grey[400]),
        itemBuilder: (context, index) {
          final key = widget.box.keyAt(index);
          String taskName = widget.box.get(key)[0];
          bool taskStatus = widget.box.get(key)[1];

          // tapping the tile/task should lead to different screen
          // for that, onTap must be customized
          // hence ListTile is used instead of CheckboxListTile

          return ListTile(
            contentPadding: EdgeInsets.symmetric(horizontal: 9),
            title: Text(
              taskName,
              style: TextStyle(
                decoration: taskStatus == true
                    ? TextDecoration.lineThrough
                    : TextDecoration.none,
              ),
            ),
            leading: Checkbox(
              value: taskStatus,
              onChanged: (value) {
                setState(() {
                  widget.box.put(key, [taskName, value!]);
                });
              },
            ),
            trailing: IconButton(
              icon: Icon(Icons.close),
              onPressed: () {
                setState(() {
                  widget.box.delete(key);
                });
              },
            ),

            onTap: () async {
              // used async/await because we need to wait for the user to return, to refresh the state/screen
              await Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (context) =>
                      EditTaskPage(taskIndex: key, box: widget.box),
                ),
              );
              setState(() {}); // refresh screen after possible updates
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () {
          setState(() {
            widget.box.add(['new task', false]);
          });
        },
        icon: const Icon(Icons.add),
        label: const Text(
          "New Task",
          style: TextStyle(fontWeight: FontWeight.w900),
        ),
      ),
    );
  }
}
